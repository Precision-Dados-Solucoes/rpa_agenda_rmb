#!/usr/bin/env python3
"""
Script de debug para mostrar exatamente os dados de conex√£o
Ajuda a identificar problemas nas credenciais ou conectividade
"""

import os
from dotenv import load_dotenv
import socket
import ssl

# Carrega as vari√°veis de ambiente
load_dotenv('config.env')

def debug_connection_data():
    """Mostra todos os dados de conex√£o para debug"""
    print("="*80)
    print("üîç DEBUG COMPLETO DOS DADOS DE CONEX√ÉO")
    print("="*80)
    
    # 1. Verificar vari√°veis de ambiente
    print("\n1Ô∏è‚É£ VARI√ÅVEIS DE AMBIENTE CARREGADAS:")
    print("-" * 50)
    
    # Vari√°veis individuais
    user = os.getenv("user")
    password = os.getenv("password")
    host = os.getenv("host")
    port = os.getenv("port")
    dbname = os.getenv("dbname")
    
    # Vari√°veis SUPABASE_*
    supabase_user = os.getenv("SUPABASE_USER")
    supabase_password = os.getenv("SUPABASE_PASSWORD")
    supabase_host = os.getenv("SUPABASE_HOST")
    supabase_port = os.getenv("SUPABASE_PORT")
    supabase_database = os.getenv("SUPABASE_DATABASE")
    
    # DATABASE_URL
    database_url = os.getenv("DATABASE_URL")
    
    print("üìã VARI√ÅVEIS INDIVIDUAIS:")
    print(f"  user: {user}")
    print(f"  password: {'*' * len(password) if password else 'N√ÉO DEFINIDO'}")
    print(f"  host: {host}")
    print(f"  port: {port}")
    print(f"  dbname: {dbname}")
    
    print("\nüìã VARI√ÅVEIS SUPABASE_*:")
    print(f"  SUPABASE_USER: {supabase_user}")
    print(f"  SUPABASE_PASSWORD: {'*' * len(supabase_password) if supabase_password else 'N√ÉO DEFINIDO'}")
    print(f"  SUPABASE_HOST: {supabase_host}")
    print(f"  SUPABASE_PORT: {supabase_port}")
    print(f"  SUPABASE_DATABASE: {supabase_database}")
    
    print("\nüìã DATABASE_URL:")
    print(f"  DATABASE_URL: {database_url[:50] + '...' if database_url and len(database_url) > 50 else database_url}")
    
    # 2. Verificar se todas as vari√°veis est√£o presentes
    print("\n2Ô∏è‚É£ VERIFICA√á√ÉO DE COMPLETUDE:")
    print("-" * 50)
    
    # Usar vari√°veis individuais ou SUPABASE_* como fallback
    final_user = user or supabase_user
    final_password = password or supabase_password
    final_host = host or supabase_host
    final_port = port or supabase_port or "5432"
    final_dbname = dbname or supabase_database
    
    print(f"‚úÖ Usu√°rio final: {final_user}")
    print(f"‚úÖ Senha final: {'*' * len(final_password) if final_password else 'N√ÉO DEFINIDO'}")
    print(f"‚úÖ Host final: {final_host}")
    print(f"‚úÖ Porta final: {final_port}")
    print(f"‚úÖ Database final: {final_dbname}")
    
    # Verificar se todas est√£o presentes
    missing_vars = []
    if not final_user:
        missing_vars.append("user/SUPABASE_USER")
    if not final_password:
        missing_vars.append("password/SUPABASE_PASSWORD")
    if not final_host:
        missing_vars.append("host/SUPABASE_HOST")
    if not final_dbname:
        missing_vars.append("dbname/SUPABASE_DATABASE")
    
    if missing_vars:
        print(f"\n‚ùå VARI√ÅVEIS FALTANDO: {', '.join(missing_vars)}")
        return False
    else:
        print("\n‚úÖ TODAS AS VARI√ÅVEIS EST√ÉO PRESENTES!")
    
    # 3. Teste de conectividade de rede
    print("\n3Ô∏è‚É£ TESTE DE CONECTIVIDADE DE REDE:")
    print("-" * 50)
    
    try:
        print(f"üîÑ Testando resolu√ß√£o DNS para {final_host}...")
        
        # For√ßar IPv4
        try:
            ip_info = socket.gethostbyname_ex(final_host)
            ipv4_addresses = ip_info[2]  # Lista de endere√ßos IPv4
            
            if ipv4_addresses:
                ip_address = ipv4_addresses[0]  # Primeiro IPv4
                print(f"‚úÖ DNS IPv4 resolvido: {final_host} ‚Üí {ip_address}")
                
                print(f"üîÑ Testando conectividade TCP na porta {final_port}...")
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(10)  # 10 segundos de timeout
                result = sock.connect_ex((ip_address, int(final_port)))  # Usar IP direto
                sock.close()
                
                if result == 0:
                    print(f"‚úÖ Porta {final_port} est√° acess√≠vel em {ip_address}!")
                else:
                    print(f"‚ùå Porta {final_port} n√£o est√° acess√≠vel em {ip_address} (c√≥digo: {result})")
                    return False
            else:
                print(f"‚ùå Nenhum endere√ßo IPv4 encontrado para {final_host}")
                return False
                
        except socket.gaierror as e:
            print(f"‚ùå DNS IPv4 falhou: {e}")
            return False
            
    except socket.gaierror as e:
        print(f"‚ùå Erro DNS: {e}")
        print("üîß Verifique se o host est√° correto")
        return False
    except Exception as e:
        print(f"‚ùå Erro de conectividade: {e}")
        return False
    
    # 4. Teste de SSL
    print("\n4Ô∏è‚É£ TESTE DE SSL:")
    print("-" * 50)
    
    try:
        print(f"üîÑ Testando SSL para {final_host}:{final_port}...")
        context = ssl.create_default_context()
        with socket.create_connection((final_host, int(final_port)), timeout=10) as sock:
            with context.wrap_socket(sock, server_hostname=final_host) as ssock:
                print(f"‚úÖ SSL funcionando! Certificado: {ssock.getpeercert()['subject']}")
    except Exception as e:
        print(f"‚ùå Erro SSL: {e}")
        print("üîß SSL pode estar com problemas, mas pode funcionar com sslmode=require")
    
    # 5. Resumo dos dados que ser√£o usados
    print("\n5Ô∏è‚É£ RESUMO DOS DADOS PARA CONEX√ÉO:")
    print("-" * 50)
    print("üîó DADOS QUE SER√ÉO USADOS NA CONEX√ÉO:")
    print(f"  Host: {final_host}")
    print(f"  Porta: {final_port}")
    print(f"  Usu√°rio: {final_user}")
    print(f"  Senha: {'*' * len(final_password)}")
    print(f"  Database: {final_dbname}")
    print(f"  SSL Mode: require")
    
    # 6. URL de conex√£o que seria usada
    print("\n6Ô∏è‚É£ URL DE CONEX√ÉO GERADA:")
    print("-" * 50)
    connection_url = f"postgresql://{final_user}:{final_password}@{final_host}:{final_port}/{final_dbname}?sslmode=require"
    print(f"URL: {connection_url[:50]}...")
    print("üîß Esta √© a URL que seria usada para conectar")
    
    return True

def test_psycopg2_with_debug():
    """Testa psycopg2 com debug detalhado"""
    print("\n7Ô∏è‚É£ TESTE REAL COM PSYCOPG2:")
    print("-" * 50)
    
    try:
        import psycopg2
        
        # Obter dados finais
        user = os.getenv("user") or os.getenv("SUPABASE_USER")
        password = os.getenv("password") or os.getenv("SUPABASE_PASSWORD")
        host = os.getenv("host") or os.getenv("SUPABASE_HOST")
        port = os.getenv("port") or os.getenv("SUPABASE_PORT", "5432")
        dbname = os.getenv("dbname") or os.getenv("SUPABASE_DATABASE")
        
        print(f"üîÑ Tentando conectar com psycopg2...")
        print(f"   Host: {host}")
        print(f"   Porta: {port}")
        print(f"   Usu√°rio: {user}")
        print(f"   Database: {dbname}")
        
        conn = psycopg2.connect(
            user=user,
            password=password,
            host=host,
            port=port,
            dbname=dbname,
            sslmode="require"
        )
        
        print("‚úÖ CONEX√ÉO ESTABELECIDA COM SUCESSO!")
        
        # Teste b√°sico
        cursor = conn.cursor()
        cursor.execute("SELECT NOW()")
        result = cursor.fetchone()
        print(f"üìä Data/hora atual: {result[0]}")
        
        cursor.close()
        conn.close()
        print("üîí Conex√£o fechada com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO NA CONEX√ÉO: {e}")
        print(f"üîç Tipo do erro: {type(e).__name__}")
        
        # An√°lise detalhada do erro
        error_str = str(e).lower()
        if "could not translate host name" in error_str:
            print("üåê PROBLEMA: DNS n√£o consegue resolver o host")
            print("üîß SOLU√á√ÉO: Verifique se o host est√° correto")
        elif "authentication failed" in error_str:
            print("üîê PROBLEMA: Falha na autentica√ß√£o")
            print("üîß SOLU√á√ÉO: Verifique usu√°rio e senha")
        elif "connection refused" in error_str:
            print("üö´ PROBLEMA: Conex√£o recusada")
            print("üîß SOLU√á√ÉO: Verifique se o Supabase est√° acess√≠vel")
        elif "ssl" in error_str:
            print("üîí PROBLEMA: Erro de SSL")
            print("üîß SOLU√á√ÉO: Verifique se sslmode=require est√° sendo usado")
        elif "timeout" in error_str:
            print("‚è∞ PROBLEMA: Timeout de conex√£o")
            print("üîß SOLU√á√ÉO: Verifique conectividade de rede")
        
        return False

if __name__ == "__main__":
    print("üîç DEBUG COMPLETO DE CONEX√ÉO SUPABASE")
    print("=" * 80)
    
    # Debug dos dados
    data_ok = debug_connection_data()
    
    if data_ok:
        # Teste real
        connection_ok = test_psycopg2_with_debug()
        
        print("\n" + "="*80)
        if connection_ok:
            print("üéâ DEBUG CONCLU√çDO: CONEX√ÉO FUNCIONANDO!")
            print("‚úÖ Todos os dados est√£o corretos")
            print("‚úÖ Conectividade OK")
            print("‚úÖ SSL funcionando")
            print("üöÄ Pronto para usar no RPA!")
        else:
            print("‚ùå DEBUG CONCLU√çDO: PROBLEMA IDENTIFICADO!")
            print("üîß Verifique os erros acima para corrigir")
    else:
        print("\n" + "="*80)
        print("‚ùå DEBUG CONCLU√çDO: DADOS INCOMPLETOS!")
        print("üîß Configure as vari√°veis de ambiente primeiro")
    
    print("="*80)
