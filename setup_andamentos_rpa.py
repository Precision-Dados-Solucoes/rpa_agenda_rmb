#!/usr/bin/env python3
"""
Script de configura√ß√£o para RPA Andamentos
Verifica depend√™ncias e configura o ambiente
"""

import os
import sys
import subprocess
import platform

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio. Vers√£o atual:", sys.version)
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def install_requirements():
    """Instala as depend√™ncias necess√°rias"""
    print("üì¶ Instalando depend√™ncias...")
    
    try:
        # Instalar requirements
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements_andamentos.txt"], 
                      check=True, capture_output=True, text=True)
        print("‚úÖ Depend√™ncias Python instaladas")
        
        # Instalar playwright browsers
        subprocess.run([sys.executable, "-m", "playwright", "install", "chromium"], 
                      check=True, capture_output=True, text=True)
        print("‚úÖ Navegador Chromium instalado")
        
        # Instalar depend√™ncias do sistema (Linux)
        if platform.system() == "Linux":
            subprocess.run(["playwright", "install-deps", "chromium"], 
                          check=True, capture_output=True, text=True)
            print("‚úÖ Depend√™ncias do sistema instaladas")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def check_environment_file():
    """Verifica se o arquivo de configura√ß√£o existe"""
    config_file = "config.env"
    
    if not os.path.exists(config_file):
        print(f"‚ö†Ô∏è Arquivo {config_file} n√£o encontrado")
        print("üìù Criando arquivo de exemplo...")
        
        example_content = """# Configura√ß√µes do RPA Andamentos
# Copie este arquivo e preencha com suas credenciais

# Credenciais Novajus
NOVAJUS_USERNAME=seu_email@exemplo.com
NOVAJUS_PASSWORD=sua_senha

# Credenciais Supabase
SUPABASE_HOST=db.exemplo.supabase.co
SUPABASE_PORT=5432
SUPABASE_DATABASE=postgres
SUPABASE_USER=postgres
SUPABASE_PASSWORD=sua_senha_supabase
"""
        
        with open(config_file, "w", encoding="utf-8") as f:
            f.write(example_content)
        
        print(f"‚úÖ Arquivo {config_file} criado com exemplo")
        print("üîß Configure suas credenciais no arquivo antes de executar")
        return False
    else:
        print(f"‚úÖ Arquivo {config_file} encontrado")
        return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ["downloads", ".github/workflows"]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úÖ Diret√≥rio criado: {directory}")
        else:
            print(f"‚úÖ Diret√≥rio existe: {directory}")

def show_schedule_info():
    """Mostra informa√ß√µes sobre o agendamento"""
    print("\n" + "="*60)
    print("üìÖ AGENDAMENTO AUTOM√ÅTICO")
    print("="*60)
    print("üïê Hor√°rios de execu√ß√£o:")
    print("   ‚Ä¢ Segunda a Sexta: 12:00 BRT")
    print("   ‚Ä¢ Segunda a Sexta: 17:00 BRT")
    print("")
    print("üåç Fuso hor√°rio: S√£o Paulo (BRT)")
    print("üîÑ Execu√ß√£o: GitHub Actions")
    print("")
    print("üìã Tabela de destino: andamento_base")
    print("üîç Compara√ß√£o: id_andamento_legalone ‚Üî id_andamento")
    print("‚öôÔ∏è Opera√ß√£o: UPSERT (atualiza se existe, insere se novo)")
    print("="*60)

def main():
    """Fun√ß√£o principal de configura√ß√£o"""
    print("üîß CONFIGURA√á√ÉO DO RPA ANDAMENTOS")
    print("="*50)
    
    # Verifica√ß√µes
    checks = [
        ("Vers√£o do Python", check_python_version),
        ("Arquivo de configura√ß√£o", check_environment_file),
        ("Depend√™ncias", install_requirements),
    ]
    
    # Criar diret√≥rios
    create_directories()
    
    # Executar verifica√ß√µes
    all_ok = True
    for name, check_func in checks:
        print(f"\nüîç Verificando {name}...")
        if not check_func():
            all_ok = False
    
    # Resultado final
    print("\n" + "="*50)
    if all_ok:
        print("‚úÖ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("üöÄ O RPA est√° pronto para ser executado")
        print("\nüìù Para executar manualmente:")
        print("   python rpa_andamentos_completo.py")
        print("\nüìÖ Para agendamento autom√°tico:")
        print("   Configure os secrets no GitHub e fa√ßa push do c√≥digo")
    else:
        print("‚ö†Ô∏è CONFIGURA√á√ÉO INCOMPLETA")
        print("üîß Verifique os itens marcados com ‚ùå acima")
        print("üìù Configure suas credenciais no arquivo config.env")
    
    show_schedule_info()

if __name__ == "__main__":
    main()
